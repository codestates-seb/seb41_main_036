# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: server_ci

on:
  push:
    branches: 
      - main
      - dev_back
  pull_request:
    branches:
      - main
      - dev_back

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
#     defaults:
#         run: 
#           working-directory: ./server

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: init with Gradle
      uses: gradle/gradle-build-action@v2
    - run: gradle init
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 7.5.1
        arguments: build
    - name: permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: build/libs
        
#    # build한 후 프로젝트를 압축합니다.
#     - name: Make zip file
#       run: zip -r ./server-deploy.zip .
#       shell: bash
    
#     # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
#     # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_BE_ACCESS_KEY_ID }} # 등록한 Github Secret이 자동으로 불려옵니다.
#         aws-secret-access-key: ${{ secrets.AWS_BE_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
#         aws-region: ${{ secrets.AWS_REGION }}
    
#     # 압축한 프로젝트를 S3로 전송합니다.
#     - name: Upload to S3
#       run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./server-deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/server-deploy.zip
      
#     # CodeDeploy에게 배포 명령을 내립니다.
#     - name: Code Deploy
#       run: >
#         aws deploy create-deployment --application-name pikcha36
#         --deployment-config-name CodeDeployDefault.AllAtOnce
#         --deployment-group-name pikcha36-group
#         --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},bundleType=zip,key=server-deploy.zip
